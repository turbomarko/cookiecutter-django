#!/bin/sh

# Arguments
c1=$1  # Environment
c2=$2  # Command
c3=$3  # Command argument (optional)


# Help command
help() {
  echo "Usage: <environment> <command> [<command argument>]"
  echo "environment:"
  echo "* local"
  echo "* production"
  echo ""
  echo "command:"
  echo "* generate_certificates"
  echo "* build"
  echo "* init"
  echo "* up"
  echo "* down"
  echo "* logs"
  echo "* showmigrations"
  echo "* makemigrations"
  echo "* migrate"
  echo "* createsuperuser"
  echo "* start_simple_app"
  echo "* backup_db"
  echo "* list_backup_db"
  echo "* restore_db"
  echo "* upload_backup_db_s3"
  echo "* download_backup_db_s3"
  echo "* pycodestyle"
  echo "* flake8"
  echo "* pylint"
  echo "* pytest"
  echo "* coverage"
  echo "* unittest"
  echo "* check_all"
}


# App commands
generate_certificates() {
  if [ "$c1" = "local" ]
  then
    mkdir certs && docker-compose -f "$c1".yml run django openssl req -newkey rsa:4096 -x509 -sha256 -days 3650 -nodes -out certs/my-dev-env.local.crt -keyout certs/my-dev-env.local.key -subj "/CN=my-dev-env.local" && echo "Certificates generated successfully."
  else
    echo "Operation aborted. Certificates can only be generated for 'local' environment."
  fi
}

build() {
  docker-compose -f "$c1".yml build
}

init() {
  echo "Do you confirm that the following are installed: docker, docker-compose, git, openssl and pre-commit (y/n)? "
  read -r answer
  if [ "$answer" = "y" ]
  then
    build
    generate_ssl_certificates
    git init
    pre-commit install
  else
    echo "Operation aborted. Please install docker, docker-compose, git, openssl and pre-commit."
  fi
}

up() {
  docker-compose -f "$c1".yml up
}

down() {
  docker-compose -f "$c1".yml down
}

logs() {
  docker-compose -f "$c1".yml logs -t
}


# Django commands
showmigrations() {
  docker-compose -f "$c1".yml run --rm django python manage.py showmigrations
}

makemigrations() {
  docker-compose -f "$c1".yml run --rm django python manage.py makemigrations
}

migrate() {
  docker-compose -f "$c1".yml run --rm django python manage.py migrate
}

createsuperuser() {
  docker-compose -f "$c1".yml run --rm django python manage.py createsuperuser
}

start_simple_app() {
  docker-compose -f local.yml run --rm django python manage.py startapp --template=./template_apps/simple "$c3"
  mv ./"$c3" ./{{cookiecutter.project_slug}}/"$c3"
}


# Postgres commands
backup_db() {
  docker-compose -f local.yml exec postgres backup
  docker cp "$(docker-compose -f local.yml ps -q postgres)":/backups ./backups
}

list_backup_db() {
  docker-compose -f local.yml exec postgres backups
}

restore_db() {
  docker-compose -f local.yml exec postgres restore "$c3"
}

upload_backup_db_s3() {
  docker-compose -f production.yml run --rm awscli upload
}

download_backup_db_s3() {
  docker-compose -f production.yml run --rm awscli download "$c3"
}


# Code check commands
pycodestyle() {
  echo "PYCODESTYLE" && docker-compose -f "$c1".yml run --rm django pycodestyle .
}

flake8() {
  echo "FLAKE8" && docker-compose -f "$c1".yml run --rm django flake8
}

black() {
  echo "BLACK" && docker-compose -f "$c1".yml run --rm django black . --diff --color --line-length 120 --exclude "^docs/|/migrations/"
}

format() {
  echo "BLACK" && docker-compose -f "$c1".yml run --rm django black . --line-length 120 --exclude "^docs/|/migrations/"
}

pylint() {
  echo "PYLINT" && docker-compose -f "$c1".yml run --rm django pylint --load-plugins pylint_django --django-settings-module=config.settings.local ./{{cookiecutter.project_slug}}
}

pytest() {
  docker-compose -f "$c1".yml run --rm django pytest
}

coverage() {
  docker-compose -f local.yml run --rm django coverage run -m pytest
  docker-compose -f local.yml run --rm django coverage report
}

unittest() {
  docker-compose -f "$c1".yml run --rm django python manage.py test
}

check_all() {
  pycodestyle && echo "pycodestyle - No issue found"
  flake8 && echo "flake8 - No issue found"
  black && echo "black - No issue found"
  coverage && echo "coverage - No issue found"
  unittest && echo "unittest - No issue found"
}

case "$c1" in
  "local"|"production")
    $c2;;
  *)
    help;;
esac
